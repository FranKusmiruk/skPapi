#    ________  __   ___    _______     __         _______   __     
#   /"       )|/"| /  ")  |   __ "\   /""\       |   __ "\ |" \    
#  (:   \___/ (: |/   /   (. |__) :) /    \      (. |__) :)||  |   
#   \___  \   |    __/    |:  ____/ /' /\  \     |:  ____/ |:  |   
#    __/  \\  (// _  \    (|  /    //  __'  \    (|  /     |.  |   
#   /" \   :) |: | \  \  /|__/ \  /   /  \\  \  /|__/ \    /\  |\  
#  (_______/  (__|  \__)(_______)(___/    \___)(_______)  (__\_|_)
# 
#      𝐒𝐤𝐫𝐢𝐩𝐭𝐀𝐏𝐈 𝐰𝐢𝐭𝐡 𝐭𝐨𝐧𝐬 𝐨𝐟 𝐮𝐬𝐞𝐟𝐮𝐥 𝐟𝐞𝐚𝐭𝐮𝐫𝐞𝐬, 𝐦𝐨𝐬𝐭𝐥𝐲 𝐟𝐨𝐫 𝐩𝐚𝐜𝐤𝐞𝐭 𝐬𝐭𝐮𝐟𝐟.
#
#   ______________________________________________________________
#
#  Requirements: Skript, skript-reflect, ThatPacketAddon, Reqn, SkriptJSON
#
#  Tested on Paper 1.16.5
#  Most of the things should work for servers with spigot 1.13+, but I didn't test it!
#  Some things can maybe even work on 1.8-1.12, but I won't give support for these versions of Minecraft,
#  so don't leave bad review just because it doesn't work for your 1.8 server. ♥ Thanks for understanding!
#
#  If you run into problems, feel free to message me on discord: pesekjan#5182
#
#
#  Ｃｒｅｄｉｔｓ (っ◔◡◔)っ ♥
#    Big thanks to Mr.Darth for helping me with packets and reflection (https://forums.skunity.com/resources/authors/mr-darth.11173/)
#    Govindas for helping me with some packets for NPCs (https://forums.skunity.com/members/govindas.643/)

options:
	check-for-updates: true


#        ⚠ Do not change the code below or I will not ⚠
#            ⚠ be able to help you with problems ⚠
#   ______________________________________________________________

	version: 1.0-BETA.2

import:
	org.bukkit.Bukkit

option nms:
	get: 
		set {_nms} to Bukkit.getServer().getClass().getPackage().getName().split("\.")[3]
		return "net.minecraft.server.%{_nms}%"

import:
	java.util.Optional
	java.util.UUID
	java.util.Arrays
	
	{@nms}.PacketPlayOutGameStateChange
	{@nms}.PacketPlayOutAnimation

	org.bukkit.ChatColor
	org.bukkit.entity.EntityType
	
	ch.njol.skript.Skript

	com.comphenix.protocol.wrappers.WrappedDataWatcher$Registry
	com.comphenix.protocol.wrappers.WrappedChatComponent
	com.comphenix.protocol.wrappers.Pair
	com.comphenix.protocol.wrappers.BukkitConverters
	com.comphenix.protocol.wrappers.EnumWrappers
	com.comphenix.protocol.wrappers.EnumWrappers$EntityPose
	com.comphenix.protocol.wrappers.EnumWrappers$ItemSlot
	com.comphenix.protocol.wrappers.EnumWrappers$EntityUseAction
	com.comphenix.protocol.utility.MinecraftReflection


on load:
	set {wccConverter} to BukkitConverters.getWrappedChatComponentConverter()
	set {chatFormatEnum} to MinecraftReflection.getMinecraftClass("EnumChatFormat")
	set {postypes::*} to ...EntityPose.values()
	set {chatcolors::*} to ...ChatColor.values()

option ver:
	get:
		return console.getServer().getClass().getPackage().getName().split("\.")[3]

on load:
	set {_skript-reflect.ver} to "2.1.1"
	set {_ThatPacketAddon.ver} to "1.0-BETA.3"
	set {_Reqn.ver} to "1.2.1"
	set {_SkriptJSON.ver} to "1.0.0"
	loop "skript-reflect", "ThatPacketAddon", "SkriptJSON", "Reqn":
		if server.getServer().getPluginManager().getPlugin(loop-value) is not set:
			Skript.error("&c&lSKPAPI: &cYou missing addon: %loop-value%")
		else:
			(server.getServer().getPluginManager().getPlugin(loop-value).getDescription().getVersion()) is not {_%loop-value%.ver}
			Skript.warning("&6&lSKPAPI: &6Detected %loop-value% %(server.getServer().getPluginManager().getPlugin(loop-value).getDescription().getVersion())%, recommended %loop-value% version is %{_%loop-value%.ver}%")	
	if {@check-for-updates} is true:
		send a "get" request to "https://raw.githubusercontent.com/Pesekjak/skPapi/main/version.txt"
		set {_resp} to the last http response
		set {_LastVer} to {_resp}'s body
		set {_LastVerChars::*} to {_LastVer} split by ""
		set {_LastVer} to ""
		loop {_LastVerChars::*}:
			if loop-value is "." or "1" or "2" or "3" or "4" or "5" or "6" or "7" or "8" or "9" or "0" or "-" or "B" or "E" or "T" or "A":
				set {_LastVer} to "%{_LastVer}%%loop-value%"
		send a "get" request to "https://raw.githubusercontent.com/Pesekjak/skPapi/main/changelog.txt"
		set {_resp} to the last http response
		set {_ChangeLog} to {_resp}'s body
		if {_LastVer} is not "{@version}":
			Skript.warning("&6&lSKPAPI: &6Detected version {@version}&6, the newest version is %{_LastVer}%")
			loop all players where [input is op]:
				send "&6&lSKPAPI: &6Detected version {@version}&6, the newest version is %{_LastVer}%" to loop-player
				send "" to loop-player
				send "&6%{_ChangeLog}%" to loop-player
				send formatted "&6Gew the newest version here: &9&n<link:https://github.com/Pesekjak/skPapi>github.com/Pesekjak/skPapi<reset>" to loop-player


#   ______________________________________________________________


#                                    _                 
#                                   (_)                
#   _____  ___ __  _ __ ___  ___ ___ _  ___  _ __  ___ 
#  / _ \ \/ / '_ \| '__/ _ \/ __/ __| |/ _ \| '_ \/ __|
# |  __/>  <| |_) | | |  __/\__ \__ \ | (_) | | | \__ \
#  \___/_/\_\ .__/|_|  \___||___/___/_|\___/|_| |_|___/
#           | |                                        
#           |_|


# Name: Random UUID - generates random UUID
# Example: new classic uuid
expression new (1¦classic|2¦trimmed) uuid:
	return type: string
	get:
		return (UUID.randomUUID().toString() if parse mark is 1, else UUID.randomUUID().toString().replace("-", "")) 


# Name: JSON Object - Returns JSON object from text, useful for chat components
# Example: jsonobject from text "&c[ADMIN]"
expression jsonobject from text %string%:
	return type: jsonobject
	get:
		set {_json::text} to expr-1
		return json of list variable {_json::*}


# Name: Entity ID - Returns ID of certain entities, useful for packets
# Example: set {_id} to entity id of player's target
expression entity id of %entities%:
	return type: integers
	get:
		loop exprs-1:
			add (loop-expression.getEntityId()) to {_ids::*}
		return {_ids::*}


# Name: Entity type ID - Returns ID of entity type, useful for packets
# Example: set {_id} to entitytype id of player's target
expression entitytype id of %entitytypes%:
	return type: integer
	get:
		loop exprs-1:
			set {_loopentity} to "%loop-expression%"
			set {_v} to {_loopentity} in upper case
			replace " " in {_v} with "_"
			loop ...EntityType.values():
				"%loop-value-2%" = "%{_v}%"
				set {_b} to loop-value-2.getTypeId()
				stop loop
		return {_b}


#   ______________________________________________________________


#        __  __          _       
#       / _|/ _|        | |      
#   ___| |_| |_ ___  ___| |_ ___ 
#  / _ \  _|  _/ _ \/ __| __/ __|
# |  __/ | | ||  __/ (__| |_\__ \
#  \___|_| |_| \___|\___|\__|___/


# Name: Store UUID - Stores uuid from player's nickname
# Example: store uuid from nick "Notch" to {_uuid}
effect store uuid from nick %string% to %~objects%:
	trigger:
		delay the effect
		send a "get" request to "https://api.mojang.com/users/profiles/minecraft/%expr-1%"
		set {_resp} to the last http response
		set {_body} to {_resp}'s body
		copy json {_body} to {_output::*}
		set raw expr-2 to {_output::id}
		continue


# Name: Store skin - Stores skin from uuid
# Example: store skin from uuid {_uuid} to {_skin}
effect store skin from uuid %string% to %~objects%:
	trigger:
		delay the effect
		send a "get" request to "https://sessionserver.mojang.com/session/minecraft/profile/%expr-1%?unsigned=false"
		set {_resp} to the last http response
		set {_body} to {_resp}'s body
		copy json {_body} to {_output::*}
		set raw expr-2 to skin with value "%{_output::properties::1::value}%" signature "%{_output::properties::1::signature}%"
		continue


# Name: Destroy entity - Destroys entities from players.
# Example: destroy player's target from player:
effect destroy %entities% (from|for) %players%:
	trigger:
		set {_packet} to new play_server_entity_destroy packet
		loop exprs-1:
			set {_count} to ({_count} ? 1) + 1
			set {_id::%{_count}%} to loop-expression.getEntityId()
		set int array field of {_packet} to {_id::*}
		send exprs-2 packet {_packet}


# Name: Destroy entity with id - Destroys entity with certain ID from players. (Use this for client side entities)
# Example: destroy entity with id 101 from player:
effect destroy entity with id %integer% from %players%:
	trigger:
		set {_packet} to new play_server_entity_destroy packet
		set int array field of {_packet} to expr-1
		send exprs-2 packet {_packet}


# Name: Client side entity - Spawns client side entity for players.
# Example: summon clientside entity 5 with id 101 with uuid (new classic uuid) at player's location for player
effect summon clientside entity %integer% with id %integer% with uuid %string% at %location% for %players%:
	trigger:
		set {_packet} to new play_server_spawn_entity_living packet
		set int field 1 of {_packet} to expr-1
		set int field 0 of {_packet} to expr-2
		set uuid field 0 of {_packet} to expr-3
		set double field 0 of {_packet} to x-pos of expr-4
		set double field 1 of {_packet} to y-pos of expr-4
		set double field 2 of {_packet} to z-pos of expr-4
		send exprs-5 packet {_packet}


# Name: Move client side entity - Moves with client side entity for players.
# Example: move clientside entity with id 101 by 1600 0 1600 90 0 for player
effect move clientside entity [with id] %integer% by [x:] %integer% [y:] %integer% [z:] %integer% [yaw:] %number% [pitch:] %number% for %players%:
	trigger:
		set {_packet} to new play_server_rel_entity_move packet
		set int pnum 0 of {_packet} to expr-1
		set short pnum 0 of {_packet} to expr-2
		set short pnum 1 of {_packet} to expr-3
		set short pnum 2 of {_packet} to expr-4
		set float field 0 of {_packet} to (expr-5 ? 0)
		set float field 1 of {_packet} to (expr-6 ? 0)
		send exprs-7 packet {_packet}


# Name: Elytra animation - Applies elytra flying animation to client side entity for players.
# Example: force clientside entity with id 101 to fly for player:
effect force clientside entity [with id] %integer% to (1¦fly|2¦stand) for %players%:
	trigger:
		set {_packet} to new play_server_entity_metadata packet
		set {_dw} to new datawatcher
		set watched byte 0 of {_dw} to (128.byteValue() if parse mark = 1, else 0.byteValue())
		set watchable collection field 0 of {_packet} to {_dw}
		set int field 0 of {_packet} to expr-1
		send exprs-2 packet {_packet}


# Name: Glow client side entity - Applies glow effect to client side entity for players.
# Example: make clientside entity with id 101 glow for player:
effect make clientside entity [with id] %integer% (1¦glow|2¦unglow) for %players%:
	trigger:
		set {_packet} to new play_server_entity_metadata packet
		set {_dw} to new datawatcher
		set watched byte 0 of {_dw} to (64.byteValue() if parse mark = 1, else 0.byteValue())
		set watchable collection field 0 of {_packet} to {_dw}
		set int field 0 of {_packet} to expr-1
		send exprs-2 packet {_packet}


# Name: Fire client side entity - Applies fire effect to client side entity for players.
# Example: make clientside entity with id 101 burn for player:
effect make clientside entity [with id] %integer% (1¦burn|2¦stop burn) for %players%:
	trigger:
		set {_packet} to new play_server_entity_metadata packet
		set {_dw} to new datawatcher
		set watched byte 0 of {_dw} to (1.byteValue() if parse mark = 1, else 0.byteValue())
		set watchable collection field 0 of {_packet} to {_dw}
		set int field 0 of {_packet} to expr-1
		send exprs-2 packet {_packet}


# Name: Rotate head - Rotates head of entity with id for certain players.
# Example: rotate clientside entity with id 101 by 90 for player:
effect rotate clientside entity with id %integer% by %number% for %players%:
	trigger:
		set {_packet} to new play_server_entity_head_rotation packet
		set int pnum 0 of {_packet} to expr-1
		set byte field 0 of {_packet} to (expr-2*256/360)
		send exprs-3 packet {_packet}


# Name: Client side holo - Creates client side hologram, for removing use "Destroy entity with id" effect
# Example: create clientside holo "My Hologram" with id 101 at player's location for player
effect create clientside holo %string% with id %integer% at %location% for %players%:
	trigger:
		set {_packet} to new play_server_spawn_entity_living packet
		set int field 1 of {_packet} to 1
		set int field 0 of {_packet} to expr-2
		set double field 0 of {_packet} to x-pos of expr-3
		set double field 1 of {_packet} to y-pos of expr-3
		set double field 2 of {_packet} to z-pos of expr-3
		send expr-4 packet {_packet}
		set {_metadata} to new play_server_entity_metadata packet
		set {_wcc} to WrappedChatComponent.fromText("%expr-1%")
		set {_nmsCC} to {wccConverter}.getGeneric({_wcc})
		set {_name} to Optional.of({_nmsCC})
		set {_dw} to new datawatcher
		set watched byte 0 of {_dw} to 32.byteValue()
		set watched boolean 3 of {_dw} to true
		set {_serializer} to Registry.getChatComponentSerializer(true)
		{_dw}.setObject(2, {_serializer}, {_name})
		set watchable collection field 0 of {_metadata} to {_dw}
		set int field 0 of {_metadata} to expr-2
		send exprs-4 packet {_metadata}


# Name: Update side holo - Updates text of client side hologram
# Example: update clientside holo with id 101 with text "Updated text" for player
effect update clientside holo [with id] %integer% with text %string% for %players%:
	trigger:
		set {_metadata} to new play_server_entity_metadata packet
		set {_wcc} to WrappedChatComponent.fromText("%expr-2%")
		set {_nmsCC} to {wccConverter}.getGeneric({_wcc})
		set {_name} to Optional.of({_nmsCC})
		set {_dw} to new datawatcher
		set watched byte 0 of {_dw} to 32.byteValue()
		set watched boolean 3 of {_dw} to true
		set {_serializer} to Registry.getChatComponentSerializer(true)
		{_dw}.setObject(2, {_serializer}, {_name})
		set watchable collection field 0 of {_metadata} to {_dw}
		set int field 0 of {_metadata} to expr-1
		send exprs-3 packet {_metadata}


# Name: Change skin - Changes player's skin for certain players, for visibility call this effect after switching dimensions
# Example: change skin of player to {_skin} for all players
effect change skin of %player% to %skin% for %players%:
	trigger:
		set {_packet} to new play_server_player_info packet
		set "PlayerInfoAction" penum 0 of {_packet} to "ADD_PLAYER"
		set {_a::gamemode} to creative
		set {_a::gameprofile::name} to expr-1's nickname
		set {_a::gameprofile::skin} to expr-2
		set {_a::latency} to 0
		set {_a::gameprofile::uuid} to expr-1's uuid
		set "PlayerInfoData" array pjson 0 of {_packet} to json of listvar {_a::*}
		send exprs-3 packet {_packet}


# Name: Change nick - Changes player's nick for certain players, for visibility call this effect after switching dimensions
# Example: change nick of player to "deadmau5" with skin {_skin} for all players
effect change nick of %player% to %string% with skin %skin% for %players%:
	trigger:
		set {_packet} to new play_server_player_info packet
		set "PlayerInfoAction" penum 0 of {_packet} to "ADD_PLAYER"
		set {_a::gamemode} to creative
		set {_a::gameprofile::name} to expr-2
		set {_a::gameprofile::skin} to expr-3
		set {_a::latency} to 0
		set {_a::gameprofile::uuid} to expr-1's uuid
		set "PlayerInfoData" array pjson 0 of {_packet} to json of listvar {_a::*}
		send exprs-4 packet {_packet}


# Name: Remove player from tablist - Removes player from tablist of certain players
# Example: remove player from tablist of all players
effect remove %player% from tablist of %players%:
	trigger:
		set {_p} to new play_server_player_info packet
		set "PlayerInfoAction" penum 0 of {_packet} to "REMOVE_PLAYER"
		set {_a::gamemode} to creative
		set {_a::gameprofile::name} to expr-1
		store uuid from nick expr-1's nickname to {_uuid}
		store skin from uuid {_uuid} to {_skin}
		set {_a::gameprofile::skin} to {_skin}
		set {_a::latency} to 0
		set {_a::gameprofile::uuid} to expr-1's uuid
		set "PlayerInfoData" array pjson 0 of {_packet} to json of listvar {_a::*}
		send exprs-2 packet {_packet}


# Name: Add player to tablist - Adds player to tablist of certain players
# Example: add player to tablist of all players
effect add %player% to tablist of %players%:
	trigger:
		set {_p} to new play_server_player_info packet
		set "PlayerInfoAction" penum 0 of {_packet} to "ADD_PLAYER"
		set {_a::gamemode} to creative
		set {_a::gameprofile::name} to expr-1
		store uuid from nick expr-1's nickname to {_uuid}
		store skin from uuid {_uuid} to {_skin}
		set {_a::gameprofile::skin} to {_skin}
		set {_a::latency} to 0
		set {_a::gameprofile::uuid} to expr-1's uuid
		set "PlayerInfoData" array pjson 0 of {_packet} to json of listvar {_a::*}
		send exprs-2 packet {_packet}


# Name: Show demo screen - Shows demo screen to players
# Example: show demoscreen to player
effect show demo[ ]screen to %players%:
	trigger:
		set {_packet} to new PacketPlayOutGameStateChange(PacketPlayOutGameStateChange.f, 0)
		loop exprs-1:
			loop-value.getHandle().playerConnection.sendPacket({_packet})


# Name: Start rain - Starts client side rain for players
# Example: force rain start for player
effect force rain (1¦start|2¦stop) for %players%:
	trigger:
		set {_packet} to ((new PacketPlayOutGameStateChange(PacketPlayOutGameStateChange.c, 0)) if parse mark = 1, else (new PacketPlayOutGameStateChange(PacketPlayOutGameStateChange.b, 0)))
		loop exprs-1:
			loop-value.getHandle().playerConnection.sendPacket({_packet})


# Name: Custom sky - Change client side color of the sky for players. keep in mind that rain has to be on (I don't recommend going over 21, use -1 for brighter stars)
# Example: change sky color to 5 for player
effect change sky color to %integer% for %players%:
	trigger:
		set {_packet} to new PacketPlayOutGameStateChange(PacketPlayOutGameStateChange.h, expr-1)
		player.getHandle().playerConnection.sendPacket({_packet})
		loop exprs-2:
			loop-value.getHandle().playerConnection.sendPacket({_packet})


# Name: Player tag visibility - Changes player's tag visibility to certain players
# Example: set visibility to tag "Notch" to false with teamname "hiddentag_%player%" for %players%
effect set visibility to tag %string% to (1¦true|2¦false) with teamname %string% for %players%:
	trigger:
		set {_packet} to new play_server_scoreboard_team packet
		set byte field 0 of {_packet} to 0 
		set string field 0 of {_packet} to expr-2
		{_packet}.getEnumModifier(ChatColor, {chatFormatEnum}).write(0, ChatColor.WHITE)
		if parse mark is 1:
			set string field 1 of {_packet} to "always" 
		else:
			set string field 1 of {_packet} to "never" 
		set collection field 0 of {_packet} to expr-1
		send exprs-3 packet {_packet}


# Name: Player tags - Changes player's tags (prefix/suffix) to certain players (for entities use their UUIDs, for players use their nicknames)
# Example: change player's nickname tags to "&c[ADMIN] " and " &6VIP" with color "&c" with teamname "1A" to all players
effect change %string% tags to %string% and %string% with color %string% with teamname %string% to %players%:
	trigger:
		set {_packet} to new play_server_scoreboard_team packet
		set byte field 0 of {_packet} to 0 
		set string field 0 of {_packet} to expr-5
		set {_colorsymbols::*} to "&0", "&1", "&2", "&3", "&4", "&5", "&6", "&7", "&8", "&9", "&a", "&b", "&c", "&d", "&e", "&f", "&k", "&l", "&m", "&n", "&o", "&r"
		loop {_colorsymbols::*}:
			expr-4 = loop-value
			set {_num} to loop-index
			stop loop
		{_packet}.getEnumModifier(ChatColor, {chatFormatEnum}).write(0, {chatcolors::%{_num}%})
		set chat component field 1 of {_packet} to (jsonobject from text expr-2)
		set chat component field 2 of {_packet} to (jsonobject from text expr-3)
		set collection field 0 of {_packet} to expr-1
		send exprs-6 packet {_packet}


# Name: Remove team - Removes team with ID
# Example: remove clientside team with teamname "hiddentag_%player%" for player
effect remove clientside team with teamname %string% for %players%:
	trigger:
		set {_packet} to new play_server_scoreboard_team packet
		set byte field 0 of {_packet} to 1
		set string field 0 of {_packet} to expr-1
		send exprs-2 packet {_packet}


# Name: Fake tablist player - Adds fake player to tablist of certain players, you can use tab in chat
# Example: add fake tablist player "Notch" with skin {_skin} with uuid (new classic uuid) for all players
effect add fake [tablist] player %string% [with] skin %skin% [with] uuid %string% for %players%:
	trigger:
		set {_packet} to new play_server_player_info packet
		set "PlayerInfoAction" penum 0 of {_packet} to "ADD_PLAYER"
		set {_a::gamemode} to creative
		set {_a::gameprofile::name} to expr-1
		set {_a::gameprofile::skin} to expr-2
		set {_a::latency} to 0
		set {_a::gameprofile::uuid} to expr-3
		set "PlayerInfoData" array pjson 0 of {_packet} to json of listvar {_a::*}
		send exprs-4 packet {_packet}

# Name: Remove fake tablist player - Removes fake player to tablist of certain players, you can use tab in chat
# Example: remove fake tablist player with uuid (new classic uuid) for all players
effect remove fake [tablist] player with uuid %string% for %players%:
	trigger:
		set {_packet} to new play_server_player_info packet
		set "PlayerInfoAction" penum 0 of {_packet} to "REMOVE_PLAYER"
		set {_a::gamemode} to creative
		set {_a::gameprofile::name} to "-"
		set {_a::gameprofile::skin} to steve
		set {_a::latency} to 0
		set {_a::gameprofile::uuid} to expr-1
		set "PlayerInfoData" array pjson 0 of {_packet} to json of listvar {_a::*}
		send exprs-2 packet {_packet}


# Name: Guardian - Plays guardian effect for certain players
# Example: play guardian effect with sounds for player
effect play guardian effect (1¦with|2¦without) sounds for %players%:
	trigger:
		if parse mark is 1:
			set {_packet} to new PacketPlayOutGameStateChange(PacketPlayOutGameStateChange.k, 1)
		else:
			set {_packet} to new PacketPlayOutGameStateChange(PacketPlayOutGameStateChange.k, 0)
		player.getHandle().playerConnection.sendPacket({_packet})
		loop exprs-1:
			loop-value.getHandle().playerConnection.sendPacket({_packet})


# Name: Totem - Plays totem effect for certain players
# Example: play totem effect for player
effect play totem effect for %players%:
	trigger:
		set {_packet} to new play_server_entity_status packet
		loop exprs-1:
			set int field 0 of {_packet} to loop-expression.getEntityId()
			set byte field 0 of {_packet} to 35
			send loop-expression packet {_packet}


# Name: Finish action - Finishes action for player (client side)
# Example: finish action for player
effect finish action for %players%:
	trigger:
		set {_packet} to new play_server_entity_status packet
		loop exprs-1:
			set int field 0 of {_packet} to loop-expression.getEntityId()
			set byte field 0 of {_packet} to 9
			send loop-expression packet {_packet}


# Name: Fake damage - Fake damages player
# Example: fakedamage player for all players
effect fakedamage %player% for %players%:
	trigger:
		set {_handle} to expr-1.getHandle()
		set {_packet} to new PacketPlayOutAnimation({_handle}, 1)
		loop exprs-2:
			loop-expression.getHandle().playerConnection.sendPacket({_packet})


# Name: Position changer - Changes position of player, only other player's can see it
# Example: set position of player to "STANDING" for all players
effect set position of %player% to %string% for %players%:
	trigger:
		set {_packet} to new play_server_entity_metadata packet
		set int field 0 of {_packet} to (entity id of expr-1)
		set {_dw} to new datawatcher
		set {_sz} to Registry.get(EnumWrappers.getEntityPoseClass())
		set {_pos::*} to "STANDING", "FALL_FLYING", "SLEEPING", "SWIMMING", "SPIN_ATTACK", "CROUCHING", "DYING"
		loop {_pos::*}:
			expr-2 = loop-value
			set {_num} to loop-index
			stop loop
		{_dw}.setObject(6, {_sz}, {postypes::%{_num}%}.toNms())
		set watchable collection field 0 of {_packet} to {_dw}
		send exprs-3 packet {_packet}


# Name: Client gamemode - Change gamemode client sided
# Example: set clientgamemode of player to "survival"
effect set clientgamemode of %players% to %string%:
	trigger:
		if exprs-2 is "survival":
			set {_packet} to new PacketPlayOutGameStateChange(PacketPlayOutGameStateChange.d, 0)
		else if exprs-2 is "creative":
			set {_packet} to new PacketPlayOutGameStateChange(PacketPlayOutGameStateChange.d, 1)
		else if exprs-2 is "adventure":
			set {_packet} to new PacketPlayOutGameStateChange(PacketPlayOutGameStateChange.d, 2)
		else:
			set {_packet} to new PacketPlayOutGameStateChange(PacketPlayOutGameStateChange.d, 3)
		loop exprs-1:
			loop-value.getHandle().playerConnection.sendPacket({_packet})


# Name: Open chest - Opens/Closes chest for certain players
# Example: force chest at location of event-block to open for player
effect force chest at %location% to (1¦open|2¦close) for %players%:
	trigger:
		set {_packet} to new play_server_block_action packet
		set location field of {_packet} to expr-1
		set block field of {_packet} to block at expr-1
		set int field 0 of {_packet} to 1
		if parse mark is 1:
			set int field 1 of {_packet} to 1
		else:
			set int field 1 of {_packet} to 0
		send exprs-2 packet {_packet}


# Name: Clientside NPC - Creates clientside npc
# Example: create clientside npc with id 101 with name "NPC" with skin {_skin} with uuid (new classic uuid) with 2nd skin layer true at location player's location for player
effect create clientside npc with id %integer% with name %string% with skin %skin% with uuid %string% with 2nd skin layer %boolean% at location %location% for %players%:
	trigger:
		set {_npcspawn} to new play_server_named_entity_spawn packet
		set int pnum 0 of {_npcspawn} to expr-1
		
		set {_packet} to new play_server_player_info packet
		set "PlayerInfoAction" penum 0 of {_packet} to "ADD_PLAYER"
		set {_a::gamemode} to creative
		set {_a::gameprofile::name} to expr-2
		set {_a::gameprofile::skin} to expr-3
		set {_a::latency} to 0
		set {_uuid} to expr-4
		set {_a::gameprofile::uuid} to {_uuid}
		set "PlayerInfoData" array pjson 0 of {_packet} to json of listvar {_a::*}
		send exprs-7 packet {_packet}
		set "uuid" pinfo 0 of {_npcspawn} to {_uuid}
		set double pnum 0 of {_npcspawn} to expr-6's x-loc
		set double pnum 1 of {_npcspawn} to expr-6's y-loc
		set double pnum 2 of {_npcspawn} to expr-6's z-loc
		set short pnum 0 of {_npcspawn} to 1
		set byte pnum 0 of {_npcspawn} to (expr-6's yaw)*256/360
		set byte pnum 1 of {_npcspawn} to (expr-6's pitch)*256/360
		send exprs-7 packet {_npcspawn}
		if expr-5 is true:
			set {_skinpacket} to new play_server_entity_metadata packet
			set {_dw} to new datawatcher
			set watched byte 16 of {_dw} to 255.byteValue()
			set int field 0 of {_skinpacket} to expr-1
			set watchable collection field 0 of {_skinpacket} to {_dw}
			send exprs-7 packet {_skinpacket}


# Name: Position changer from id - Changes position of entity with id for certain players
# Example: set position of entity with id 101 to "STANDING" for all players
effect set position of entity with id %integer% to %string% for %players%:
	trigger:
		set {_packet} to new play_server_entity_metadata packet
		set int field 0 of {_packet} to expr-1
		set {_dw} to new datawatcher
		set {_sz} to Registry.get(EnumWrappers.getEntityPoseClass())
		set {_pos::*} to "STANDING", "FALL_FLYING", "SLEEPING", "SWIMMING", "SPIN_ATTACK", "CROUCHING", "DYING"
		loop {_pos::*}:
			expr-2 = loop-value
			set {_num} to loop-index
			stop loop
		{_dw}.setObject(6, {_sz}, {postypes::%{_num}%}.toNms())
		set watchable collection field 0 of {_packet} to {_dw}
		send exprs-3 packet {_packet}


# Name: Play swing animation - Swings with hand of entity with id
# Example: make entity with id 101 swing for all players
effect make entity with id %integer% swing for %players%:
	trigger:
		set {_packet} to new play_server_animation packet
		set int pnum 0 of {_packet} to expr-1
		send exprs-2 packet {_packet}


# Name: Cooldown - Sets cooldown of item
# Example: set cooldown for player of ender pearl to 20 ticks
effect set cooldown for %players% of %itemtype% to %integer% ticks:
	trigger:
		loop expressions-1:
			loop-expression.setCooldown((random item of expr-2).getType(), expr-3)


# Name: Equip clientside - Equips entity clientside for certain players
# Example: eqiup clientside entity with id 101 with diamond sword air air air air air for player
effect eqiup clientside entity with id %integer% with [hand] %itemtype% [offhand] %itemtype% [helmet] %itemtype% [chestplate] %itemtype% [leggings] %itemtype% [boots] %itemtype% for %players%:
	trigger:
		set {_packet} to new play_server_entity_equipment packet		
		set {_handslot} to new Pair(ItemSlot.MAINHAND, random item out of (expr-2))
		set {_offhandslot} to new Pair(ItemSlot.OFFHAND, random item out of (expr-3))
		set {_helmetslot} to new Pair(ItemSlot.HEAD, random item out of (expr-4))
		set {_chestslot} to new Pair(ItemSlot.CHEST, random item out of (expr-5))
		set {_leggslot} to new Pair(ItemSlot.LEGS, random item out of (expr-6))
		set {_bootsslot} to new Pair(ItemSlot.FEET, random item out of (expr-7))
		set {_list} to Arrays.asList({_handslot}, {_offhandslot}, {_helmetslot}, {_chestslot}, {_leggslot}, {_bootsslot})
		{_packet}.getSlotStackPairLists().write(0, {_list})
		set int field 0 of {_packet} to expr-1
		send exprs-8 packet {_packet}


#   ______________________________________________________________


#                       _
#                      | |      
#   _____   _____ _ __ | |_ ___ 
#  / _ \ \ / / _ \ '_ \| __/ __|
# |  __/\ V /  __/ | | | |_\__ \
#  \___| \_/ \___|_| |_|\__|___/


# Name: Clientside interact - Called when player interact with entity clientside (works for holograms and npcs too)
# Event values: player, clientside-event-entity, interaction-type
# Example: on clientside interact with entity: broadcast "%player% - %clientside-event-entity% - %interaction-type%"
event "clientsideEntityInteract":
	patterns: 
		clientside interact with entity
	event-values: player
expression clientside-event-entity:
	return type: integer
	usable in:
		custom event "clientsideEntityInteract"
	get:
		return event.getData("id")
expression interaction-type:
	return type: string
	usable in:
		custom event "clientsideEntityInteract"
	get:
		return event.getData("type")
on packet event play_client_use_entity:
	set {_values::player} to player
	set {_data::id} to (int field 0 of event-packet)
	set {_data::type} to (object field 1 of event-packet)
	call custom event "clientsideEntityInteract" with {_values::*} and data {_data::*}


# Name: Clientside digging - Called when player start/stop digging, finish action with item (eating, pulling bow...), drop item/stack, swap hands
# Event values: player, event-action-type, event-action-location, event-action-side
# Example: on clientside digging: broadcast "%player% - %event-action-type% - %event-action-location% - %event-action-side%"
event "clientsideDigging":
	patterns: 
		clientside digging
	event-values: player
expression event-action-type:
	return type: string
	usable in:
		custom event "clientsideDigging"
	get:
		return event.getData("type")
expression event-action-location:
	return type: location
	usable in:
		custom event "clientsideDigging"
	get:
		return event.getData("location")
expression event-action-side:
	return type: string
	usable in:
		custom event "clientsideDigging"
	get:
		return event.getData("side")
on packet event play_client_block_dig:
	set {_values::player} to player
	set {_data::type} to (object field 2 of event-packet)
	set {_data::location} to (location field 0 of event-packet)
	set {_data::side} to (object field 1 of event-packet)
	call custom event "clientsideDigging" with {_values::*} and data {_data::*}


#   ______________________________________________________________
